generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manga {
  id             String             @id @default(uuid())
  cover          String
  status         String?
  type           String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  releaseDate    DateTime?
  manga_uuid     String?            @unique
  chapters       Chapter[]
  comments       Comment[]
  libraryEntries LibraryEntry[]
  likes          Like[]
  translations   MangaTranslation[]
  views          View[]
  collections    Collection[]       @relation("CollectionMangas")
  categories     Category[]         @relation("MangaCategories")
  languages      Language[]         @relation("MangaLanguages")
  reviews        Review[]
}

model MangaTranslation {
  id          String  @id @default(uuid())
  mangaId     String
  language    String
  name        String
  description String?
  manga       Manga   @relation(fields: [mangaId], references: [id])

  @@unique([mangaId, language])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  mangaId   String
  createdAt DateTime @default(now())
  manga     Manga    @relation(fields: [mangaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, mangaId])
}

model View {
  id        String   @id @default(uuid())
  userId    String
  mangaId   String
  createdAt DateTime @default(now())
  manga     Manga    @relation(fields: [mangaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  mangas Manga[] @relation("MangaCategories")
  users  User[]  @relation("UserCategories")
}

model Language {
  id       String    @id @default(uuid())
  code     String    @unique
  name     String
  chapters Chapter[]
  mangas   Manga[]   @relation("MangaLanguages")
  users    User[]    @relation("UserLanguages")
}

model User {
  id                    String           @id @default(uuid())
  name                  String
  email                 String           @unique
  createdAt             DateTime         @default(now())
  avatar                String?
  bio                   String?
  birthdate             DateTime?
  coins                 Int              @default(0)
  cover                 String?
  password              String
  updatedAt             DateTime         @updatedAt
  username              String           @unique
  resetToken            String?
  resetTokenExp         DateTime?
  emailVerificationCode String?
  emailVerificationExp  DateTime?
  emailVerified         Boolean          @default(false)
  isAdmin               Boolean          @default(false)
  collections           Collection[]
  collectionLikes       CollectionLike[]
  comments              Comment[]
  libraryEntries        LibraryEntry[]
  likes                 Like[]
  views                 View[]
  categories            Category[]       @relation("UserCategories")
  languages             Language[]       @relation("UserLanguages")
  profileLikes          ProfileLike[]    @relation("ProfileLikes")
  profileLikedBy        ProfileLike[]    @relation("ProfileLikedBy")
  followers             ProfileFollow[]  @relation("UserFollowers")
  following             ProfileFollow[]  @relation("UserFollowing")
  reviews               Review[]
  reviewVotes           ReviewVote[]
}

model Collection {
  id          String           @id @default(uuid())
  userId      String
  name        String
  cover       String
  description String?
  status      CollectionStatus @default(PRIVATE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  likes       CollectionLike[]
  mangas      Manga[]          @relation("CollectionMangas")
}

model CollectionLike {
  id           String     @id @default(uuid())
  userId       String
  collectionId String
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, collectionId])
}

model LibraryEntry {
  id         String   @id @default(uuid())
  userId     String
  mangaId    String
  isRead     Boolean  @default(false)
  isLiked    Boolean  @default(false)
  isFollowed Boolean  @default(false)
  isComplete Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  manga      Manga    @relation(fields: [mangaId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, mangaId])
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String    @id @default(uuid())
  mangaId     String
  languageId  String
  title       String
  volume      String?
  chapter     String
  externalUrl String?
  version     Int       @default(1)
  publishAt   DateTime?
  readableAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  language    Language  @relation(fields: [languageId], references: [id])
  manga       Manga     @relation(fields: [mangaId], references: [id])
  pages       Page[]
}

model Page {
  id        String  @id @default(uuid())
  chapterId String
  number    Int
  imageUrl  String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@unique([chapterId, number])
}

model Comment {
  id        String    @id @default(uuid())
  message   String
  userId    String
  mangaId   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  manga     Manga     @relation(fields: [mangaId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  user      User      @relation(fields: [userId], references: [id])

  @@index([mangaId])
  @@index([userId])
}

enum CollectionStatus {
  PRIVATE
  PUBLIC
}

model Wallpaper {
  id        String           @id @default(uuid())
  name      String           @db.VarChar(255)
  cover     String           @db.VarChar(2083)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  images    WallpaperImage[]

  @@map("wallpapers")
}

model WallpaperImage {
  id          String    @id @default(uuid())
  wallpaperId String
  url         String    @db.VarChar(2083)
  wallpaper   Wallpaper @relation(fields: [wallpaperId], references: [id])

  @@map("wallpaper_images")
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  cover       String
  link        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("playlists")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  path      String
  url       String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

model ProfileLike {
  id        String   @id @default(uuid())
  userId    String
  targetId  String
  createdAt DateTime @default(now())
  user      User     @relation("ProfileLikes", fields: [userId], references: [id])
  target    User     @relation("ProfileLikedBy", fields: [targetId], references: [id])

  @@unique([userId, targetId])
}

model ProfileFollow {
  id        String   @id @default(uuid())
  userId    String
  targetId  String
  createdAt DateTime @default(now())
  user      User     @relation("UserFollowers", fields: [userId], references: [id])
  target    User     @relation("UserFollowing", fields: [targetId], references: [id])

  @@unique([userId, targetId])
}

model Review {
  id            String       @id @default(uuid())
  userId        String
  mangaId       String
  title         String? // Campo opcional
  rating        Int          @db.SmallInt
  content       String
  art           Int          @db.SmallInt
  story         Int          @db.SmallInt
  characters    Int          @db.SmallInt
  worldbuilding Int          @db.SmallInt
  pacing        Int          @db.SmallInt
  emotion       Int          @db.SmallInt
  originality   Int          @db.SmallInt
  dialogues     Int          @db.SmallInt
  upvotes       Int          @default(0)
  downvotes     Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  manga         Manga        @relation(fields: [mangaId], references: [id])
  votes         ReviewVote[]

  @@unique([userId, mangaId])
}

model ReviewVote {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  isUpvote  Boolean
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, reviewId])
}
