{
  "name": "db_s2mangas",
  "version": "1.0.1",
  "main": "server.ts",
  "scripts": {
    "test": "jest --passWithNoTests",
    "test:watch": "jest --watch --passWithNoTests",
    "test:coverage": "jest --coverage --passWithNoTests",
    "test:cache": "ts-node -r tsconfig-paths/register src/scripts/testCache.ts",
    "lint": "eslint .",
    "type-check": "tsc --noEmit",
    "dev": "tsx watch src/server.ts",
    "dev:interactive": "tsx src/scripts/interactiveDev.ts",
    "build": "tsc && tsc-alias",
    "build:watch": "tsc -w",
    "build:dev": "tsc && ts-node-dev --respawn --transpile-only src/server.ts",
    "build:prod": "tsx src/server.ts",
    "start": "node start.js",
    "start:direct": "node dist/server.js",
    "studio": "npx prisma studio",
    "db:migrate": "npx prisma migrate dev",
    "db:seed": "npx prisma db seed",
    "db:reset": "npx prisma migrate reset",
    "cache:clear": "ts-node -r tsconfig-paths/register -e \"import { AdvancedCacheManager } from './src/utils/advancedCache'; new AdvancedCacheManager().flush().then(() => console.log('Cache cleared'))\"",
    "cache:warm": "ts-node -r tsconfig-paths/register -e \"import { warmupCache } from './src/middlewares/smartCache'; warmupCache().then(() => console.log('Cache warmed'))\"",
    "cache:stats": "ts-node -r tsconfig-paths/register -e \"import { AdvancedCacheManager } from './src/utils/advancedCache'; new AdvancedCacheManager().getStats().then(stats => console.log(JSON.stringify(stats, null, 2)))\"",
    "cache:example": "ts-node -r tsconfig-paths/register src/examples/cacheUsage.ts",
    "cache:test-external": "ts-node -r tsconfig-paths/register src/scripts/testExternalRedis.ts",
    "logs": "tail -f logs/app.log",
    "docs:generate": "ts-node -r tsconfig-paths/register -e \"import { specs } from './src/config/swagger'; console.log(JSON.stringify(specs, null, 2))\" > api-spec.json",
    "docs:serve": "npm run dev",
    "docs:open": "open http://localhost:3000/docs/scalar",
    "railway:build": "./railway-build.sh",
    "railway:check": "node pre-deploy-check.js",
    "railway:diagnose": "ts-node -r tsconfig-paths/register src/scripts/diagnoseDatabase.ts",
    "railway:troubleshoot": "ts-node -r tsconfig-paths/register src/scripts/railwayTroubleshoot.ts",
    "railway:quick-check": "ts-node -r tsconfig-paths/register src/scripts/quickCheck.ts",
    "diagnose:deployment": "ts-node -r tsconfig-paths/register src/scripts/diagnoseDeployment.ts",
    "observability:test": "ts-node -r tsconfig-paths/register src/scripts/testObservability.ts",
    "elasticsearch:init": "ts-node -r tsconfig-paths/register src/scripts/initializeElasticsearch.ts",
    "elasticsearch:health": "ts-node -r tsconfig-paths/register -e \"import SmartSearchHandler from './src/modules/search/handlers/SmartSearchHandler'; new SmartSearchHandler().getSearchHealth().then(h => console.log(JSON.stringify(h, null, 2)))\"",
    "elasticsearch:test": "ts-node -r tsconfig-paths/register -e \"import { isElasticsearchAvailable } from './src/services/ElasticsearchService'; isElasticsearchAvailable().then(available => console.log('Elasticsearch Available:', available))\"",
    "postinstall": "npx prisma generate",
    "sentry:sourcemaps": "sentry-cli sourcemaps inject --org s2mangas --project node-express dist && sentry-cli sourcemaps upload --org s2mangas --project node-express dist"
  },
  "prisma": {
    "schema": "src/prisma/schema.prisma",
    "seed": "ts-node src/prisma/seed.ts"
  },
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=8.0.0"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@auth/core": "^0.39.1",
    "@auth/prisma-adapter": "^2.9.1",
    "@elastic/elasticsearch": "^8.19.0",
    "@faker-js/faker": "^9.8.0",
    "@jest/globals": "^29.7.0",
    "@prisma/client": "^6.11.1",
    "@scalar/express-api-reference": "^0.8.13",
    "@sentry/cli": "^2.52.0",
    "@sentry/node": "^8.40.0",
    "@types/bcryptjs": "^2.4.6",
    "@types/http-proxy-middleware": "^0.19.3",
    "@types/inquirer": "8.2.10",
    "@types/multer": "^1.4.13",
    "@types/readline-sync": "^1.4.8",
    "@types/uuid": "^10.0.0",
    "axios": "^1.9.0",
    "bcrypt": "^6.0.0",
    "bcryptjs": "^3.0.2",
    "bloom-filters": "^3.0.4",
    "bull": "^4.16.5",
    "chalk": "^4.1.2",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "form-data": "^4.0.4",
    "http-proxy-middleware": "^3.0.5",
    "i18n-iso-countries": "^7.14.0",
    "inquirer": "8.2.6",
    "ioredis": "^5.6.1",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.1",
    "node-cron": "^4.1.1",
    "nodemailer": "^6.9.0",
    "readline-sync": "^1.4.10",
    "sharp": "^0.33.2",
    "supertest": "^7.1.1",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "uuid": "^11.1.0",
    "winston": "^3.17.0",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "@eslint/js": "^9.29.0",
    "@types/bcrypt": "^5.0.2",
    "@types/cors": "^2.8.18",
    "@types/express": "^5.0.1",
    "@types/jest": "^29.5.14",
    "@types/jsonwebtoken": "^9.0.9",
    "@types/node": "^22.15.32",
    "@types/nodemailer": "^6.4.17",
    "@types/supertest": "^6.0.3",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.8",
    "@typescript-eslint/eslint-plugin": "^8.33.0",
    "@typescript-eslint/parser": "^8.33.0",
    "eslint": "^9.27.0",
    "jest": "^29.7.0",
    "nodemon": "^3.1.10",
    "prisma": "^6.11.1",
    "ts-jest": "^29.3.4",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "tsc-alias": "^1.8.16",
    "tsconfig-paths": "^4.2.0",
    "tsx": "^4.20.3",
    "typescript": "^5.9.2"
  }
}