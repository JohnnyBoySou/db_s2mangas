version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: s2mangas_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: s2mangas
    env_file:
      - .env.prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: s2mangas_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: s2mangas_elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - backend

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: s2mangas_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend

  api:
    build: .
    container_name: s2mangas_api
    ports:
      - "3000:3000"
      - "5555:5555"
    depends_on:
      - postgres
      - redis
      - elasticsearch
    env_file:
      - .env.prod
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/s2mangas"
      REDIS_URL: "redis://redis:6379"
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
      NODE_ENV: production
    networks:
      - backend

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:

networks:
  backend:
    driver: bridge
