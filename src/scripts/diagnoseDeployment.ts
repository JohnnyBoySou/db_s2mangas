#!/usr/bin/env ts-node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

console.log('üîç Diagn√≥stico de Deployment - S2Mangas Backend\n');

// Verificar arquivos essenciais
const essentialFiles = [
  'dist/server.js',
  'package.json',
  'src/prisma/schema.prisma',
  'node_modules/@prisma/client',
];

console.log('üìÅ Verificando arquivos essenciais:');
essentialFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) {
    console.log(`   ‚ö†Ô∏è Arquivo n√£o encontrado: ${file}`);
  }
});

// Verificar vari√°veis de ambiente
console.log('\nüåç Verificando vari√°veis de ambiente:');
const requiredEnvVars = [
  'DATABASE_URL',
  'JWT_SECRET',
  'NEXTAUTH_SECRET',
];

requiredEnvVars.forEach(envVar => {
  const value = process.env[envVar];
  console.log(`${value ? '‚úÖ' : '‚ùå'} ${envVar}: ${value ? '***' : 'n√£o definida'}`);
});

// Verificar Node.js e npm
console.log('\nüì¶ Verificando vers√µes:');
try {
  const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ Node.js: ${nodeVersion}`);
  console.log(`‚úÖ npm: ${npmVersion}`);
} catch (error) {
  console.log('‚ùå Erro ao verificar vers√µes:', error);
}

// Verificar mem√≥ria dispon√≠vel
console.log('\nüíæ Verificando mem√≥ria:');
try {
  const memInfo = execSync('free -h', { encoding: 'utf8' });
  console.log('Mem√≥ria do sistema:');
  console.log(memInfo);
} catch (error) {
  console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar mem√≥ria (pode ser Windows):');
  console.log('Mem√≥ria do processo Node.js:', process.memoryUsage());
}

// Verificar se o build foi feito corretamente
console.log('\nüî® Verificando build:');
try {
  const distFiles = fs.readdirSync('dist');
  console.log('Arquivos em dist/:', distFiles);
} catch (error) {
  console.log('‚ùå Erro ao ler diret√≥rio dist:', error);
}

// Verificar Prisma
console.log('\nüóÑÔ∏è Verificando Prisma:');
try {
  const prismaVersion = execSync('npx prisma --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ Prisma: ${prismaVersion}`);
} catch (error) {
  console.log('‚ùå Erro ao verificar Prisma:', error);
}

console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
