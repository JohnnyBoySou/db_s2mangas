#!/usr/bin/env ts-node

import { PrismaClient } from '@prisma/client';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function diagnoseDatabase() {
  console.log('üîç Diagn√≥stico de Conex√£o com Banco de Dados');
  console.log('============================================\n');

  // 1. Verificar vari√°veis de ambiente
  console.log('1. Verificando vari√°veis de ambiente...');
  const databaseUrl = process.env.DATABASE_URL;
  
  if (!databaseUrl) {
    console.error('‚ùå DATABASE_URL n√£o est√° definida!');
    console.log('üí° Solu√ß√£o: Configure a vari√°vel DATABASE_URL no Railway');
    return;
  }

  console.log('‚úÖ DATABASE_URL est√° definida');
  
  // Mascarar a senha na URL para seguran√ßa
  const maskedUrl = databaseUrl.replace(/:([^:@]+)@/, ':****@');
  console.log(`üìã URL do banco: ${maskedUrl}\n`);

  // 2. Verificar se o Prisma Client est√° gerado
  console.log('2. Verificando Prisma Client...');
  try {
    const { stdout } = await execAsync('npx prisma generate');
    console.log('‚úÖ Prisma Client gerado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao gerar Prisma Client:', error);
    return;
  }

  // 3. Testar conex√£o com o banco
  console.log('\n3. Testando conex√£o com o banco...');
  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: databaseUrl
      }
    }
  });

  try {
    // Teste simples de conex√£o
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com o banco estabelecida com sucesso');

    // Teste de query simples
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ Query de teste executada com sucesso:', result);

    // Verificar se as tabelas existem
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `;
    console.log('üìä Tabelas encontradas:', (tables as any[]).length);

  } catch (error: any) {
    console.error('‚ùå Erro na conex√£o com o banco:', error.message);
    
    // An√°lise espec√≠fica do erro
    if (error.message.includes('P1001')) {
      console.log('\nüîß An√°lise do erro P1001:');
      console.log('   - O servidor PostgreSQL n√£o est√° acess√≠vel');
      console.log('   - Poss√≠veis causas:');
      console.log('     ‚Ä¢ Servi√ßo PostgreSQL n√£o est√° rodando no Railway');
      console.log('     ‚Ä¢ URL do banco incorreta');
      console.log('     ‚Ä¢ Firewall ou configura√ß√£o de rede');
      console.log('     ‚Ä¢ Credenciais incorretas');
      
      console.log('\nüí° Solu√ß√µes sugeridas:');
      console.log('   1. Verifique se o servi√ßo PostgreSQL est√° ativo no Railway');
      console.log('   2. Confirme se a DATABASE_URL est√° correta');
      console.log('   3. Teste a conex√£o manualmente com psql ou outro cliente');
      console.log('   4. Verifique os logs do servi√ßo PostgreSQL no Railway');
    }
    
    if (error.message.includes('P1017')) {
      console.log('\nüîß An√°lise do erro P1017:');
      console.log('   - Servidor rejeitou a conex√£o');
      console.log('   - Poss√≠veis causas:');
      console.log('     ‚Ä¢ Credenciais incorretas');
      console.log('     ‚Ä¢ Banco de dados n√£o existe');
      console.log('     ‚Ä¢ Usu√°rio sem permiss√µes');
    }
    
    if (error.message.includes('P2002')) {
      console.log('\nüîß An√°lise do erro P2002:');
      console.log('   - Viola√ß√£o de constraint √∫nico');
      console.log('   - Isso indica que a conex√£o funciona, mas h√° dados duplicados');
    }
  } finally {
    await prisma.$disconnect();
  }

  // 4. Verificar migra√ß√µes
  console.log('\n4. Verificando migra√ß√µes...');
  try {
    const { stdout } = await execAsync('npx prisma migrate status');
    console.log('üìã Status das migra√ß√µes:');
    console.log(stdout);
  } catch (error) {
    console.error('‚ùå Erro ao verificar migra√ß√µes:', error);
  }

  // 5. Verificar configura√ß√£o do Railway
  console.log('\n5. Verificando configura√ß√£o do Railway...');
  console.log('üìã Vari√°veis de ambiente importantes:');
  console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'n√£o definido'}`);
  console.log(`   PORT: ${process.env.PORT || 'n√£o definido'}`);
  console.log(`   RAILWAY_PUBLIC_DOMAIN: ${process.env.RAILWAY_PUBLIC_DOMAIN || 'n√£o definido'}`);

  console.log('\nüéØ Recomenda√ß√µes:');
  console.log('1. Verifique se o servi√ßo PostgreSQL est√° ativo no Railway');
  console.log('2. Confirme se a DATABASE_URL est√° correta');
  console.log('3. Execute: npx prisma migrate deploy');
  console.log('4. Verifique os logs do Railway para mais detalhes');
  console.log('5. Teste a conex√£o com um cliente PostgreSQL externo');
}

// Executar o diagn√≥stico
diagnoseDatabase()
  .then(() => {
    console.log('\n‚úÖ Diagn√≥stico conclu√≠do');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro durante o diagn√≥stico:', error);
    process.exit(1);
  }); 