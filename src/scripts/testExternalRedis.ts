import { getRedisClient, getRedisL1Client } from '@/config/redis';
import { logger } from '@/utils/logger';

async function testExternalRedis() {
  console.log('üåê TESTANDO CONEX√ÉO COM REDIS EXTERNO');
  console.log('=====================================\n');

  const redis = getRedisClient();
  const redisL1 = getRedisL1Client();

  try {
    // Verificar configura√ß√£o atual
    console.log('üìã Configura√ß√£o atual:');
    console.log(`   REDIS_HOST: ${process.env.REDIS_HOST || 'localhost'}`);
    console.log(`   REDIS_PORT: ${process.env.REDIS_PORT || 6379}`);
    console.log(`   REDIS_PASSWORD: ${process.env.REDIS_PASSWORD ? '***' : 'n√£o definida'}`);
    console.log(`   REDIS_URL: ${process.env.REDIS_URL ? 'definida' : 'n√£o definida'}\n`);

    // Teste 1: Verificar conex√£o
    console.log('1Ô∏è‚É£ Testando conex√£o com Redis externo...');
    
    try {
      await redis.ping();
      console.log('‚úÖ Redis principal conectado com sucesso!');
    } catch (error) {
      console.log('‚ùå Falha na conex√£o com Redis principal:', error.message);
      console.log('üí° Verifique:');
      console.log('   - Se o servidor Redis est√° acess√≠vel');
      console.log('   - Se as credenciais est√£o corretas');
      console.log('   - Se o firewall permite a conex√£o');
      console.log('   - Se a URL do Redis est√° correta');
      return;
    }

    try {
      await redisL1.ping();
      console.log('‚úÖ Redis L1 conectado com sucesso!');
    } catch (error) {
      console.log('‚ùå Falha na conex√£o com Redis L1:', error.message);
    }

    // Teste 2: Verificar informa√ß√µes do servidor
    console.log('\n2Ô∏è‚É£ Informa√ß√µes do servidor Redis...');
    try {
      const info = await redis.info('server');
      const lines = info.split('\n');
      
      const versionLine = lines.find(line => line.startsWith('redis_version'));
      const osLine = lines.find(line => line.startsWith('os'));
      const uptimeLine = lines.find(line => line.startsWith('uptime_in_seconds'));
      
      if (versionLine) console.log(`   ${versionLine}`);
      if (osLine) console.log(`   ${osLine}`);
      if (uptimeLine) {
        const uptime = parseInt(uptimeLine.split(':')[1]);
        const hours = Math.floor(uptime / 3600);
        const minutes = Math.floor((uptime % 3600) / 60);
        console.log(`   Uptime: ${hours}h ${minutes}m`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter informa√ß√µes do servidor:', error.message);
    }

    // Teste 3: Verificar mem√≥ria
    console.log('\n3Ô∏è‚É£ Informa√ß√µes de mem√≥ria...');
    try {
      const memoryInfo = await redis.info('memory');
      const lines = memoryInfo.split('\n');
      
      const usedMemoryLine = lines.find(line => line.startsWith('used_memory_human'));
      const maxMemoryLine = lines.find(line => line.startsWith('maxmemory_human'));
      
      if (usedMemoryLine) console.log(`   ${usedMemoryLine}`);
      if (maxMemoryLine) console.log(`   ${maxMemoryLine}`);
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter informa√ß√µes de mem√≥ria:', error.message);
    }

    // Teste 4: Testar opera√ß√µes b√°sicas
    console.log('\n4Ô∏è‚É£ Testando opera√ß√µes b√°sicas...');
    
    const testKey = `test:external:${Date.now()}`;
    const testData = {
      message: 'Teste de Redis externo',
      timestamp: new Date().toISOString(),
      server: 'external'
    };

    try {
      // Salvar dados
      await redis.setex(testKey, 60, JSON.stringify(testData));
      console.log('‚úÖ Dados salvos no cache externo');

      // Recuperar dados
      const cachedData = await redis.get(testKey);
      if (cachedData) {
        const parsedData = JSON.parse(cachedData);
        console.log('‚úÖ Dados recuperados do cache externo:', parsedData.message);
      } else {
        console.log('‚ùå Falha ao recuperar dados do cache');
      }

      // Verificar TTL
      const ttl = await redis.ttl(testKey);
      console.log(`‚úÖ TTL restante: ${ttl} segundos`);

      // Limpar dados de teste
      await redis.del(testKey);
      console.log('‚úÖ Dados de teste removidos');

    } catch (error) {
      console.log('‚ùå Erro nas opera√ß√µes b√°sicas:', error.message);
    }

    // Teste 5: Verificar chaves existentes
    console.log('\n5Ô∏è‚É£ Verificando chaves existentes...');
    try {
      const keys = await redis.keys('*');
      console.log(`‚úÖ ${keys.length} chave(s) encontrada(s) no servidor`);
      
      if (keys.length > 0) {
        console.log('   Primeiras 5 chaves:');
        keys.slice(0, 5).forEach(key => {
          console.log(`   - ${key}`);
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel listar chaves:', error.message);
    }

    console.log('\nüéâ Teste do Redis externo conclu√≠do!');
    console.log('‚úÖ O cache externo est√° funcionando corretamente.');

  } catch (error) {
    console.error('\n‚ùå Erro durante o teste:', error);
    logger.error('Erro no teste do Redis externo:', error);
  } finally {
    // Fechar conex√µes
    try {
      await redis.quit();
      await redisL1.quit();
      console.log('\nüîå Conex√µes Redis fechadas.');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao fechar conex√µes:', error.message);
    }
  }
}

// Executar o teste se o arquivo for executado diretamente
if (require.main === module) {
  testExternalRedis()
    .then(() => {
      console.log('\n‚úÖ Teste do Redis externo conclu√≠do!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Teste do Redis externo falhou:', error);
      process.exit(1);
    });
}

export { testExternalRedis };
