name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'

jobs:
  validate:
    name: Code Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
      
      - name: Run TypeScript type check
        run: npm run type-check
        continue-on-error: true
      
      # - name: Run tests with coverage
      #   run: npm run test:coverage
      #   env:
      #     NODE_ENV: test
      #   continue-on-error: true
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Setup Sentry CLI
        run: |
          echo "Setting up Sentry CLI authentication..."
          # Criar arquivo .sentryclirc com o token
          cat > .sentryclirc << EOF
          [auth]
          token=${{ secrets.SENTRY_AUTH_TOKEN }}
          EOF
          echo "Sentry CLI configured"
      
      - name: Build application
        run: npm run build
      
      - name: Verify build output
        run: |
          if [ -d "dist" ]; then
            echo "✅ Build successful - dist folder created"
            echo "📁 Build contents:"
            ls -la dist/
            echo "📊 Build size:"
            du -sh dist/
          else
            echo "❌ Build failed - dist folder not found"
            exit 1
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Job de resumo dos resultados
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always()
    
    steps:
      - name: Pipeline Results
        run: |
          echo "🚀 CI/CD Pipeline Summary"
          echo "========================="
          echo "✅ Validation: ${{ needs.validate.result }}"
          echo "🔨 Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.validate.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "🎉 Pipeline completed successfully!"
          else
            echo "❌ Pipeline failed. Check the logs above."
            exit 1
          fi