name: Deploy to VPS with Docker

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Ambiente
        options:
          - production
          - staging
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'develop'
  push:
    branches: [develop]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'develop' }}

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo ‚úÖ SSH conectado com sucesso!"

      - name: Deploy to VPS with Docker
        run: |
          REPO_NAME=$(basename ${{ github.repository }})
          GIT_REPO="git@github.com:${{ github.repository }}"
          BRANCH="${{ github.event.inputs.branch || 'develop' }}"

          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
            set -e

            DEPLOY_DIR=/var/www/$REPO_NAME

            echo "üìÅ Checking repository..."
            if [ ! -d "\$DEPLOY_DIR" ]; then
              echo "üÜï Creating new deployment directory..."
              sudo mkdir -p \$DEPLOY_DIR
              sudo chown \$(whoami):\$(whoami) \$DEPLOY_DIR
              cd \$DEPLOY_DIR
              GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git clone $GIT_REPO .
              git checkout $BRANCH
            else
              echo "üîÑ Updating existing repository..."
              cd \$DEPLOY_DIR
              git remote set-url origin $GIT_REPO
              GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git fetch origin
              git checkout $BRANCH
              git pull origin $BRANCH
            fi

            echo "üìã Checking if .env.prod exists..."
            if [ ! -f ".env.prod" ]; then
              echo "‚ö†Ô∏è  Warning: .env.prod not found. Creating from template..."
              if [ -f ".env.example" ]; then
                cp .env.example .env.prod
                echo "üìù Please configure .env.prod with production values"
              fi
            fi

            echo "üê≥ Deploying with Docker Compose..."
            # Stop containers gracefully
            if [ -f "docker-compose.yaml" ]; then
              sudo docker-compose down --remove-orphans
              sudo docker-compose up --build -d
              
              echo "‚è≥ Waiting for services to start..."
              sleep 10
              
              echo "üîç Checking container status..."
              sudo docker-compose ps
              
              echo "‚úÖ Deployment completed!"
            else
              echo "‚ùå docker-compose.yaml not found!"
              exit 1
            fi
          EOF
      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
            cd /var/www/$(basename ${{ github.repository }})
            
            echo "üìä Container status:"
            sudo docker-compose ps
            
            echo "üìù Recent logs:"
            sudo docker-compose logs --tail=20 api
            
            # Test if API is responding (adjust port if needed)
            echo "üåê Testing API health..."
            if curl -f http://localhost:3000/health 2>/dev/null; then
              echo "‚úÖ API is responding"
            else
              echo "‚ö†Ô∏è  API health check failed"
            fi
          EOF
