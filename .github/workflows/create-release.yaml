name: Auto Release Tag

on:
  schedule:
    - cron: "5 13 * * 1-4" # 10:15 BRT (Brasil) = 13:15 UTC, de segunda a quinta
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necess√°rio para acessar todas as tags

      - name: Obter a √∫ltima tag
        run: |
          # Verificar se existem releases
          if gh release list --limit 1 | grep -q "."; then
            latest_tag=$(gh release view --json tagName -q '.tagName' | head -n 1)
            echo "√öltima tag encontrada: $latest_tag"
          else
            # Se n√£o h√° releases, come√ßar com 1.0.00
            latest_tag="1.0.00"
            echo "Nenhuma release encontrada. Iniciando com: $latest_tag"
          fi
          echo "tag=$latest_tag" >> $GITHUB_ENV

      - name: Calcular nova vers√£o
        run: |
          IFS='.' read -r -a parts <<< "$tag"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}

          # Remover caracteres n√£o num√©ricos do patch
          patch_number=$(echo "$patch" | sed 's/[^0-9]//g')

          # Remover zeros √† esquerda para evitar problemas com base octal
          patch_number=$((10#$patch_number))

          # Se o patch estiver vazio ou n√£o for num√©rico, definir como 0
          if [[ -z "$patch_number" || ! "$patch_number" =~ ^[0-9]+$ ]]; then
            patch_number=0
          fi

          if [[ $patch_number -lt 99 ]]; then
            patch_number=$((patch_number + 1))
          else
            patch_number=0
            minor=$((minor + 1))
          fi

          patch=$(printf "%02d" "$patch_number")
          new_tag="$major.$minor.$patch"
          
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "Nova vers√£o gerada: $new_tag"

      - name: Verificar se tag j√° existe
        run: |
          if git tag -l | grep -q "^${{ env.new_tag }}$"; then
            echo "‚ùå Tag ${{ env.new_tag }} j√° existe!"
            exit 1
          else
            echo "‚úÖ Tag ${{ env.new_tag }} √© √∫nica"
          fi

      - name: Criar nova tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

      - name: Criar release com notas autom√°ticas
        run: |
          gh release create ${{ env.new_tag }} \
            --title "Release ${{ env.new_tag }}" \
            --generate-notes \
            --latest
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Notificar sucesso
        run: |
          echo "üéâ Release ${{ env.new_tag }} criada com sucesso!"
          echo "üì¶ Dispon√≠vel em: https://github.com/${{ github.repository }}/releases/tag/${{ env.new_tag }}"
