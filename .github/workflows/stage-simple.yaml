name: Deploy to Hostinger VPS

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Ambiente
        options:
          - development
          - staging
  push:
    branches: [develop]

env:
  NODE_VERSION: '20.x'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Build application
        run: npm run build
      
      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r dist/ deploy/
          cp package.json package-lock.json deploy/
          cp -r prisma/ deploy/
          cp -r src/prisma/migrations/ deploy/prisma/ 2>/dev/null || true
          tar -czf deployment.tar.gz -C deploy .
      
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 7

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development' }}
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
      
      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to Hostinger VPS
        run: |
          echo "🚀 Deploying to ${{ inputs.environment || 'development' }} environment"
          
          # Upload deployment package
          scp deployment.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          
          # Execute deployment commands on VPS
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            
            # Define deployment directory
            DEPLOY_DIR="/var/www/${{ github.event.repository.name }}"
            BACKUP_DIR="/var/backups/${{ github.event.repository.name }}"
            
            echo "📁 Setting up directories..."
            sudo mkdir -p $DEPLOY_DIR
            sudo mkdir -p $BACKUP_DIR
            
            # Create backup of current deployment
            if [ -d "$DEPLOY_DIR/current" ]; then
              echo "💾 Creating backup..."
              sudo cp -r $DEPLOY_DIR/current $BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S)
            fi
            
            # Extract new deployment
            echo "📦 Extracting deployment package..."
            sudo rm -rf $DEPLOY_DIR/new
            sudo mkdir -p $DEPLOY_DIR/new
            sudo tar -xzf /tmp/deployment.tar.gz -C $DEPLOY_DIR/new
            
            # Install dependencies
            echo "📚 Installing dependencies..."
            cd $DEPLOY_DIR/new
            sudo npm ci --production
            
            # Run database migrations
            echo "🗄️ Running database migrations..."
            sudo npx prisma migrate deploy
            
            # Switch to new deployment
            echo "🔄 Switching to new deployment..."
            sudo rm -rf $DEPLOY_DIR/old
            if [ -d "$DEPLOY_DIR/current" ]; then
              sudo mv $DEPLOY_DIR/current $DEPLOY_DIR/old
            fi
            sudo mv $DEPLOY_DIR/new $DEPLOY_DIR/current
            
            # Restart application (adjust according to your process manager)
            echo "🔄 Restarting application..."
            sudo systemctl restart ${{ github.event.repository.name }} || true
            sudo pm2 restart ${{ github.event.repository.name }} || true
            
            # Cleanup
            echo "🧹 Cleaning up..."
            rm -f /tmp/deployment.tar.gz
            sudo rm -rf $DEPLOY_DIR/old
            
            # Keep only last 5 backups
            sudo find $BACKUP_DIR -name "backup-*" -type d | sort -r | tail -n +6 | sudo xargs rm -rf
            
            echo "✅ Deployment completed successfully!"
          EOF
      
      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          # Add health check here if you have one
          # curl -f ${{ secrets.APP_URL }}/health || exit 1
          echo "✅ Deployment verification completed"